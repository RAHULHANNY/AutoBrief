# app.py

import streamlit as st
from streamlit_extras.stylable_container import stylable_container
from granite_api import transcribe_audio, summarize_text
from docx import Document
import os
import base64
from typing import List
import time

# ================ STYLING & ANIMATIONS ================
def local_css(file_name):
    if os.path.exists(file_name):
        with open(file_name) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    else:
        st.warning(f"CSS file '{file_name}' not found.")

def add_bg_from_local(image_file):
    if os.path.exists(image_file):
        with open(image_file, "rb") as image_file_obj:
            encoded_string = base64.b64encode(image_file_obj.read()).decode()
        st.markdown(
            f"""
            <style>
            .stApp {{
                background-image: url(data:image/png;base64,{encoded_string});
                background-size: cover;
                background-attachment: fixed;
                background-position: center;
            }}
            </style>
            """,
            unsafe_allow_html=True
        )
    else:
        st.warning(f"Background image '{image_file}' not found.")

# Load custom CSS and background
local_css("styles.css")
add_bg_from_local("bg-gradient.jpg")

# ================ DOCX GENERATOR ================
def generate_meeting_doc(transcript: str, summary: str, action_items: List[str], filename: str = "Meeting_Report.docx") -> str:
    """Generate professional meeting minutes document"""
    doc = Document()
    
    # Header with logo
    doc.add_heading('AutoBrief', 0)
    doc.add_paragraph('AI-Powered Meeting Minutes', style='Normal')
    doc.add_paragraph(time.strftime("%B %d, %Y"), style='Normal')
    doc.add_page_break()
    
    # Transcript section
    doc.add_heading('Meeting Transcript', level=1)
    doc.add_paragraph(transcript, style='Normal')
    
    # Summary section
    doc.add_heading('Key Summary', level=1)
    doc.add_paragraph(summary, style='Normal')
    
    # Action items
    doc.add_heading('Action Items', level=1)
    for idx, item in enumerate(action_items, 1):
        doc.add_paragraph(f"{idx}. {item}", style='ListBullet')
    
    # Footer
    doc.add_page_break()
    doc.add_paragraph('Generated by AutoBrief AI', style='Normal')
    
    os.makedirs("output", exist_ok=True)
    save_path = os.path.join("output", filename)
    doc.save(save_path)
    return save_path

# ================ STREAMLIT UI ================
def main():
    st.set_page_config(
        page_title="AutoBrief AI",
        page_icon="üìù",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Animated header
    with st.container():
        st.markdown("""
        <div class="header-animation">
            <h1 class="title">AutoBrief<span class="ai-text">AI</span></h1>
            <p class="subtitle">Transform meetings into actionable insights</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Main content with glass morphism effect
    with stylable_container(
        key="glass_container",
        css_styles="""
        {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }
        """
    ):
        # File upload section with animation
        with st.expander("üé§ Upload Meeting Audio", expanded=True):
            uploaded_file = st.file_uploader(
                "Drag & drop or browse files",
                type=["mp3", "wav", "m4a"],
                label_visibility="collapsed"
            )
            
            if uploaded_file:
                st.audio(uploaded_file, format=uploaded_file.type)
                
                # Generate button with hover effect
                if st.button(
                    "‚ú® Generate Meeting Minutes",
                    use_container_width=True,
                    type="primary"
                ):
                    with st.spinner("üîç Analyzing meeting content..."):
                        # Simulate processing time for better UX
                        progress_bar = st.progress(0)
                        for percent_complete in range(100):
                            time.sleep(0.02)
                            progress_bar.progress(percent_complete + 1)
                        
                        # Process audio
                        audio_bytes = uploaded_file.read()
                        transcript = transcribe_audio(audio_bytes)
                        result = summarize_text(transcript)
                        if isinstance(result, tuple) and len(result) == 2:
                            summary, action_items = result
                        else:
                            summary = result
                            action_items = []
                        
                        # Display results with animations
                        st.success("‚úÖ Analysis complete!")
                        
                        # Results tabs
                        tab1, tab2, tab3 = st.tabs(["Transcript", "Summary", "Action Items"])
                        
                        with tab1:
                            st.write(transcript)
                        
                        with tab2:
                            st.markdown(f"""
                            <div class="summary-box">
                                <p>{summary}</p>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        with tab3:
                            for i, item in enumerate(action_items, 1):
                                st.markdown(f"""
                                <div class="action-item animate-in" style="animation-delay: {i * 0.1}s;">
                                    <span class="item-number">{i}</span>
                                    <span class="item-text">{item}</span>
                                </div>
                                """, unsafe_allow_html=True)
                        
                        # Download button
                        doc_path = generate_meeting_doc(transcript, summary, action_items)
                        with open(doc_path, "rb") as file:
                            st.download_button(
                                label="üì• Download Professional Report",
                                data=file,
                                file_name=f"Meeting_Minutes_{time.strftime('%Y%m%d')}.docx",
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                use_container_width=True,
                                type="secondary"
                            )

if __name__ == "__main__":
    main()